From aecc333288695ae4457ea95b2150825d61c9fc34 Mon Sep 17 00:00:00 2001
From: Juan RP <xtraeme@gmail.com>
Date: Fri, 1 Mar 2013 18:13:33 +0100
Subject: [PATCH 2/2] Fix two portability issues found by the musl libc.

__GNUC_PREREQ was defined in glibc's features.h
__{BEGIN,END}_DECLS was defined in glibc's sys/cdefs.h
---
 include/prop/prop_array.h      |  9 +++++++--
 include/prop/prop_bool.h       | 10 ++++++++--
 include/prop/prop_data.h       | 10 ++++++++--
 include/prop/prop_dictionary.h |  9 +++++++--
 include/prop/prop_ingest.h     |  9 +++++++--
 include/prop/prop_number.h     | 10 ++++++++--
 include/prop/prop_object.h     | 10 ++++++++--
 include/prop/prop_string.h     | 10 ++++++++--
 include/rbtree.h               | 21 +++++++++++++++++++--
 9 files changed, 80 insertions(+), 18 deletions(-)

diff --git a/include/prop/prop_array.h b/include/prop/prop_array.h
index 8a2e012..513299f 100644
--- include/prop/prop_array.h
+++ include/prop/prop_array.h
@@ -37,7 +37,10 @@
 
 typedef struct _prop_array *prop_array_t;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_array_t	prop_array_create(void);
 prop_array_t	prop_array_create_with_capacity(unsigned int);
 
@@ -140,6 +143,8 @@ bool		prop_array_set_cstring_nocopy(prop_array_t,
 						   const char *);
 bool		prop_array_add_and_rel(prop_array_t, prop_object_t);
 
-__END_DECLS
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_ARRAY_H_ */
diff --git a/include/prop/prop_bool.h b/include/prop/prop_bool.h
index c21d28b..f6b1250 100644
--- include/prop/prop_bool.h
+++ include/prop/prop_bool.h
@@ -37,13 +37,19 @@
 
 typedef struct _prop_bool *prop_bool_t;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_bool_t	prop_bool_create(bool);
 prop_bool_t	prop_bool_copy(prop_bool_t);
 
 bool		prop_bool_true(prop_bool_t);
 
 bool		prop_bool_equals(prop_bool_t, prop_bool_t);
-__END_DECLS
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_BOOL_H_ */
diff --git a/include/prop/prop_data.h b/include/prop/prop_data.h
index a8976e3..b2450fd 100644
--- include/prop/prop_data.h
+++ include/prop/prop_data.h
@@ -38,7 +38,10 @@
 
 typedef struct _prop_data *prop_data_t;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_data_t	prop_data_create_data(const void *, size_t);
 prop_data_t	prop_data_create_data_nocopy(const void *, size_t);
 
@@ -51,6 +54,9 @@ const void *	prop_data_data_nocopy(prop_data_t);
 
 bool		prop_data_equals(prop_data_t, prop_data_t);
 bool		prop_data_equals_data(prop_data_t, const void *, size_t);
-__END_DECLS
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_DATA_H_ */
diff --git a/include/prop/prop_dictionary.h b/include/prop/prop_dictionary.h
index 7890e31..1d506ba 100644
--- include/prop/prop_dictionary.h
+++ include/prop/prop_dictionary.h
@@ -39,7 +39,10 @@
 typedef struct _prop_dictionary *prop_dictionary_t;
 typedef struct _prop_dictionary_keysym *prop_dictionary_keysym_t;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_dictionary_t prop_dictionary_create(void);
 prop_dictionary_t prop_dictionary_create_with_capacity(unsigned int);
 
@@ -148,6 +151,8 @@ bool		prop_dictionary_set_and_rel(prop_dictionary_t,
 					    const char *,
 					    prop_object_t);
 
-__END_DECLS
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_DICTIONARY_H_ */
diff --git a/include/prop/prop_ingest.h b/include/prop/prop_ingest.h
index b6878a9..fd8f941 100644
--- include/prop/prop_ingest.h
+++ include/prop/prop_ingest.h
@@ -72,7 +72,10 @@ typedef struct {
 #define	PROP_INGEST_END							\
 	{ .pite_key = NULL }
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_ingest_context_t
 		prop_ingest_context_alloc(void *);
 void		prop_ingest_context_free(prop_ingest_context_t);
@@ -86,6 +89,8 @@ void *		prop_ingest_context_private(prop_ingest_context_t);
 bool		prop_dictionary_ingest(prop_dictionary_t,
 				       const prop_ingest_table_entry[],
 				       prop_ingest_context_t);
-__END_DECLS
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_INGEST_H_ */
diff --git a/include/prop/prop_number.h b/include/prop/prop_number.h
index 234e0df..86d16db 100644
--- include/prop/prop_number.h
+++ include/prop/prop_number.h
@@ -37,7 +37,10 @@
 
 typedef struct _prop_number *prop_number_t;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_number_t	prop_number_create_integer(int64_t);
 prop_number_t	prop_number_create_unsigned_integer(uint64_t);
 
@@ -52,6 +55,9 @@ uint64_t	prop_number_unsigned_integer_value(prop_number_t);
 bool		prop_number_equals(prop_number_t, prop_number_t);
 bool		prop_number_equals_integer(prop_number_t, int64_t);
 bool		prop_number_equals_unsigned_integer(prop_number_t, uint64_t);
-__END_DECLS
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_NUMBER_H_ */
diff --git a/include/prop/prop_object.h b/include/prop/prop_object.h
index 82f9c06..ce6229a 100644
--- include/prop/prop_object.h
+++ include/prop/prop_object.h
@@ -48,7 +48,10 @@ typedef enum {
 	PROP_TYPE_DICT_KEYSYM	=	0x646b6579	/* 'dkey' */
 } prop_type_t;
 
-__BEGIN_DECLS
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
 void		prop_object_retain(prop_object_t);
 void		prop_object_release(prop_object_t);
 
@@ -62,6 +65,9 @@ typedef struct _prop_object_iterator *prop_object_iterator_t;
 prop_object_t	prop_object_iterator_next(prop_object_iterator_t);
 void		prop_object_iterator_reset(prop_object_iterator_t);
 void		prop_object_iterator_release(prop_object_iterator_t);
-__END_DECLS
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_OBJECT_H_ */
diff --git a/include/prop/prop_string.h b/include/prop/prop_string.h
index b5f0476..1a56ea5 100644
--- include/prop/prop_string.h
+++ include/prop/prop_string.h
@@ -38,7 +38,10 @@
 
 typedef struct _prop_string *prop_string_t;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 prop_string_t	prop_string_create(void);
 prop_string_t	prop_string_create_cstring(const char *);
 prop_string_t	prop_string_create_cstring_nocopy(const char *);
@@ -57,6 +60,9 @@ bool		prop_string_append_cstring(prop_string_t, const char *);
 
 bool		prop_string_equals(prop_string_t, prop_string_t);
 bool		prop_string_equals_cstring(prop_string_t, const char *);
-__END_DECLS
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _PROPLIB_PROP_STRING_H_ */
diff --git a/include/rbtree.h b/include/rbtree.h
index 3c9c9e2..298cc41 100644
--- include/rbtree.h
+++ include/rbtree.h
@@ -32,10 +32,23 @@
 #ifndef _SYS_RBTREE_H_
 #define	_SYS_RBTREE_H_
 
+#if defined(_KERNEL) || defined(_STANDALONE)
+#include <sys/types.h>
+
+#else
 #include <stdbool.h>
 #include <inttypes.h>
+#endif
 #include <queue.h>
 
+/* GCC version checking borrowed from glibc. */
+#if defined(__GNUC__) && defined(__GNUC_MINOR__)
+#  define __GNUC_PREREQ(maj,min) \
+	((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
+#else
+#  define __GNUC_PREREQ(maj,min) 0
+#endif
+
 #if __GNUC_PREREQ(2, 96)
 # ifndef __predict_true
 #  define __predict_true(exp)     __builtin_expect((exp), 1)
@@ -52,7 +65,9 @@
 # endif
 #endif
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
 
 typedef struct rb_node {
 	struct rb_node *rb_nodes[2];
@@ -200,6 +215,8 @@ void	rb_tree_check(const rb_tree_t *, bool);
 void	rb_tree_depths(const rb_tree_t *, size_t *);
 #endif
 
-__END_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
 
 #endif	/* _SYS_RBTREE_H_*/
-- 
1.8.1.3

