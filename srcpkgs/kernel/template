# Template file for 'kernel'
. ${XBPS_SRCPKGDIR}/kernel/common-vars
#
# ATTENTION:
# kernel-headers revision is set here, not on its template!
#
revision=2
#_kernel_headers_revision=1

pkgname=kernel
build_style=custom-install
short_desc="The Linux kernel and associated stuff (2.6 branch)"
long_desc="
 This package provides the linux kernel image and associated modules."

subpackages="kernel-manpages kernel-firmware kernel-headers"
triggers="initramfs-tools"
nostrip=yes
preserve=yes

Add_dependency run glibc
Add_dependency full coreutils
Add_dependency full module-init-tools
Add_dependency run initramfs-tools
Add_dependency run kernel-firmware ">=${_kernel_ver}"
Add_dependency build perl
Add_dependency build libxslt
Add_dependency build docbook-xsl

do_build()
{
	# If there's a file called kernel-<arch>-dotconfig, use it to
	# configure the kernel; otherwise run the menuconfig target.
	local arch

	if [ "$xbps_machine" != "x86_64" ]; then
		arch=i386
	else
		arch=x86_64
	fi

	cd ${wrksrc} || return 1

	# Configure
	if [ -f ${FILESDIR}/$arch-dotconfig ]; then
		msg_normal "Detected a .config file for your arch, using it."
		cp -f ${FILESDIR}/$arch-dotconfig ${wrksrc}/.config
		make ${makejobs} oldconfig
	else
		make ${makejobs} menuconfig
	fi
	if [ -n "${revision}" ]; then
		sed -i -e "s|LOCALVERSION=\"\"|LOCALVERSION=\"_${revision}\"|" \
			${wrksrc}/.config
	fi
	# Build
	if [ -z "${_kernel_snapshot}" -a -z "${_kernel_xen_dom0}" ]; then
		make ${makejobs} mandocs || return 1
	fi
	make ${makejobs} prepare || return 1
	make ${makejobs} bzImage modules || return 1
}

do_install()
{
	local arch myver lver hdrlver hdrdest

	if [ "$xbps_machine" != "x86_64" ]; then
		arch=i386
	else
		arch=x86_64
	fi

	cd ${wrksrc} || return 1

	# Install kernel, firmware and modules
	make INSTALL_MOD_PATH=${DESTDIR} modules_install || return 1

	if [ -n "${_kernel_snapshot}" -a -n "${_kernel_patch_ver}" ]; then
		myver="${_kernel_ver}-${_kernel_patch_ver}"
	else
		myver=${version}
	fi

	if [ -n "$revision" ]; then
		lver="${myver}_${revision}"
	else
		lver="${myver}"
	fi

	if [ -n "${_kernel_headers_revision}" ]; then
		hdrlver="${version}_${_kernel_headers_revision}"
	else
		hdrlver="${version}"
	fi

	if [ -n "${_kernel_xen_dom0}" ]; then
		hdrdest=${DESTDIR}/usr/src/kernel-headers-${hdrlver}-xen-dom0
	else
		hdrdest=${DESTDIR}/usr/src/kernel-headers-${hdrlver}
	fi

	if [ -n "${_kernel_xen_dom0}" ]; then
		lver="${lver}-xen-dom0"
	fi

	install -D -m 644 .config ${DESTDIR}/boot/config-${lver} || return 1
	install -D -m 644 arch/x86/boot/bzImage \
		${DESTDIR}/boot/vmlinuz-${lver} || return 1
	install -D -m 644 System.map \
		${DESTDIR}/boot/System.map-${lver} || return 1
	cd ${DESTDIR}/lib/modules/${lver} && \
		rm -f source build && \
		ln -sf ../../../usr/src/kernel-headers-${hdrlver} \
		build || return 1

	cd ${wrksrc} || return 1
	# Install required headers to build external modules
	install -D -m644 Makefile ${hdrdest}/Makefile || return 1
	install -D -m644 kernel/Makefile ${hdrdest}/kernel/Makefile || return 1
	install -D -m644 .config ${hdrdest}/.config || return 1
	mkdir -p ${hdrdest}/include

	for i in acpi asm-generic config generated linux math-emu media net \
		pcmcia scsi sound trace video; do
		[ -d include/$i ] && \
			cp -a include/$i ${hdrdest}/include || return 1
	done

	# Add workaround for vmware not finding kernel headers.
	cd ${hdrdest}/include/linux && \
		ln -sf ../generated/utsrelease.h . && \
		ln -sf ../generated/autoconf.h . || return 1

	cd ${wrksrc} || return 1
	mkdir -p ${hdrdest}/arch/x86
	cp -a arch/x86/include ${hdrdest}/arch/x86 || return 1

	# Copy files necessary for later builds, like nvidia and vmware
	cp Module.symvers ${hdrdest} || return 1
	cp -a scripts ${hdrdest} || return 1

	mkdir -p ${hdrdest}/arch/x86/kernel
	cp arch/x86/Makefile ${hdrdest}/arch/x86 || return 1
	if [ "$arch" = "i386" ]; then
		cp arch/x86/Makefile_32.cpu ${hdrdest}/arch/x86 || return 1
	fi
	cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel || return 1

	# Add headers for lirc package
	mkdir -p ${hdrdest}/drivers/media/video
	cp drivers/media/video/*.h \
		${hdrdest}/drivers/media/video || return 1
	for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 \
		 sn9c102 usbvideo zc0301; do
		mkdir -p ${hdrdest}/drivers/media/video/$i
		cp -a drivers/media/video/$i/*.h \
			${hdrdest}/drivers/media/video/$i || return 1
	done

	# Add docbook makefile
	install -D -m644 Documentation/DocBook/Makefile \
		${hdrdest}/Documentation/DocBook/Makefile || return 1

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md || return 1

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux || return 1

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211 || return 1

	# Add dvb headers for external modules in reference to:
	# http://bugs.archlinux.org/task/9912
	mkdir -p ${hdrdest}/drivers/media/dvb/dvb-core
	cp drivers/media/dvb/dvb-core/*.h \
		${hdrdest}/drivers/media/dvb/dvb-core || return 1

	# Add dvb headers for external modules in reference to:
	# http://bugs.archlinux.org/task/11194
	mkdir -p ${hdrdest}/include/config/dvb
	cp include/config/dvb/*.h ${hdrdest}/include/config/dvb || return 1

	# Add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
	# in reference to:
	# http://bugs.archlinux.org/task/13146
	mkdir -p ${hdrdest}/drivers/media/dvb/frontends
	cp drivers/media/dvb/frontends/lgdt330x.h \
		${hdrdest}/drivers/media/dvb/frontends || return 1
	cp drivers/media/video/msp3400-driver.h \
		${hdrdest}/drivers/media/dvb/frontends || return 1

	# Add xfs and shmem for aufs building
	mkdir -p ${hdrdest}/fs/xfs
	mkdir -p ${hdrdest}/mm
	cp fs/xfs/xfs_sb.h ${hdrdest}/fs/xfs/xfs_sb.h || return 1

	# Add headers vor virtualbox in reference to:
	# http://bugs.archlinux.org/task/14568
	cp -a include/drm ${hdrdest}/include || return 1

	# Add headers for broadcom wl in reference to:
	# http://bugs.archlinux.org/task/14568
	cp -a include/trace ${hdrdest}/include || return 1

	# Copy in Kconfig files
	for i in $(find . -name "Kconfig*"); do
		mkdir -p ${hdrdest}/$(echo $i | sed 's|/Kconfig.*||')
		cp $i ${hdrdest}/$i || return 1
	done

	# Remove unneeded architectures
	for arch in alpha arm* avr32 blackfin cris frv h8300 \
		ia64 m* p* s* um v850 xtensa; do
		rm -rf ${hdrdest}/arch/${arch}
	done

	# Install manual pages.
	if [ -z "${_kernel_snapshot}" -a -z "${_kernel_xen_dom0}" ]; then
		install -d ${DESTDIR}/usr/share/man/man9
		install -m644 ${wrksrc}/Documentation/DocBook/man/*.9.gz \
			${DESTDIR}/usr/share/man/man9
	fi
}
