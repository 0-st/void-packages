--- tools/profiler/local_debug_info_symbolizer.cc
+++ tools/profiler/local_debug_info_symbolizer.cc
@@ -3,6 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include <sys/types.h>
 #include "PlatformMacros.h"
 #include "nsAutoPtr.h"
 
--- tools/profiler/platform.h
+++ tools/profiler/platform.h
@@ -29,6 +29,8 @@
 #ifndef TOOLS_PLATFORM_H_
 #define TOOLS_PLATFORM_H_
 
+#include <sys/types.h>
+
 #ifdef ANDROID
 #include <android/log.h>
 #else
--- tools/profiler/LulElf.cpp
+++ tools/profiler/LulElf.cpp
@@ -579,10 +579,10 @@
 // Return the non-directory portion of FILENAME: the portion after the
 // last slash, or the whole filename if there are no slashes.
 string BaseFileName(const string &filename) {
-  // Lots of copies!  basename's behavior is less than ideal.
-  char *c_filename = strdup(filename.c_str());
-  string base = basename(c_filename);
-  free(c_filename);
+  // basename's behavior is less than ideal so avoid it
+  const char *c_filename = filename.c_str();
+  const char *p = strrchr(c_filename, '/');
+  string base = p ? p+1 : c_filename;
   return base;
 }
 
--- tools/profiler/platform-linux.cc.orig	2015-06-11 18:39:35.689739054 +0200
+++ tools/profiler/platform-linux.cc	2015-06-11 18:40:04.479706749 +0200
@@ -651,11 +651,13 @@ void OS::Startup() {
 void TickSample::PopulateContext(void* aContext)
 {
   MOZ_ASSERT(aContext);
+#if defined(__GLIBC__)
   ucontext_t* pContext = reinterpret_cast<ucontext_t*>(aContext);
   if (!getcontext(pContext)) {
     context = pContext;
     SetSampleContext(this, aContext);
   }
+#endif
 }
 
 void OS::SleepMicro(int microseconds)
--- tools/profiler/platform-linux-lul.h	2015-08-07 17:54:21.000000000 +0200
+++ tools/profiler/platform-linux-lul.h	2015-08-13 11:35:05.321728730 +0200
@@ -16,16 +16,14 @@
 void
 logging_sink_for_LUL(const char* str);
 
-// We need a definition of gettid(), but glibc doesn't provide a
-// wrapper for it.
-#if defined(__GLIBC__)
+// We need a definition of gettid(), but neither glibc nor
+// musl libc provide a wrapper for it.
 #include <unistd.h>
 #include <sys/syscall.h>
 static inline pid_t gettid()
 {
   return (pid_t) syscall(SYS_gettid);
 }
-#endif
 
 // A singleton instance of the library.
 extern lul::LUL* sLUL;
