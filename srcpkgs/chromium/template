# Template file for 'chromium'
pkgname=chromium
#See http://www.chromium.org/developers/calendar for the latest version
version=35.0.1916.153
revision=1
short_desc="Google's attempt at creating a safer, faster, and more stable browser"
maintainer="Juan RP <xtraeme@gmail.com>"
homepage="http://www.chromium.org/"
license="BSD"

_url_base="https://commondatastorage.googleapis.com"
_toolchains_rev=12935

lib32disabled=yes
# XXX cannot be cross compiled right now, disabled for now.
only_for_archs="i686 x86_64"

distfiles="
 ${_url_base}/${pkgname}-browser-official/${pkgname}-${version}.tar.xz
 ${_url_base}/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_linux_x86.tgz
 ${_url_base}/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_linux_x86.tgz
 ${_url_base}/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_translator.tgz
 ${_url_base}/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_translator.tgz.sha1hash"

checksum="
 280ceb4307ba334918aacd1c5672e6ce6538bf229f90415245ede5b569e5e70e
 2d72245cf0fc5aec95dcf315d88d787aaeff85e2fae28b8521d60a3dd95e28d4
 6baee05d11e353aac83a94125722d1f85c1aaa5fae0bfea55f996bd1d9c2a6eb
 142108d8ce184c3e2b18126a01bed14e286f953d90897a6d1c97f2bf7802cc0a
 67005b390ba80b736b48fb1511bdf3fccd8fc808f4928e7fcca69f5677148b83"

skip_extraction="
 naclsdk_linux_x86.tgz
 naclsdk_pnacl_linux_x86.tgz
 naclsdk_pnacl_translator.tgz
 naclsdk_pnacl_translator.tgz.sha1hash"

hostmakedepends="which yasm python pkg-config perl gperf bison ninja clang llvm"
makedepends="libpng-devel>=1.6 gtk+-devel nss-devel pciutils-devel
 libXi-devel libgcrypt-devel libgnome-keyring-devel cups-devel elfutils-devel
 libXcomposite-devel speech-dispatcher-devel libXrandr-devel mit-krb5-devel
 libXScrnSaver-devel alsa-lib-devel icu-devel protobuf-devel snappy-devel
 libxml2-devel libxslt-devel opus-devel pulseaudio-devel nss-devel
 libXcursor-devel libflac-devel speex-devel libmtp-devel libwebp-devel>=0.4.0
 libjpeg-turbo-devel libevent-devel json-c-devel re2-devel harfbuzz-devel
 minizip-devel jsoncpp-devel zlib-devel libcap-devel v8-devel>=3.24 hwids"
depends="desktop-file-utils hicolor-icon-theme"
nostrip_files="nacl_irt_x86_64.nexe nacl_irt_x86_32.nexe"

if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
	makedepends+=" gcc-c++-multilib"
fi

pre_configure() {
	# XXX xtraeme: fix gcc{,-c++}-multilib instead.
	ldconfig &>/dev/null

	mkdir native_client/toolchain/{.tars,pnacl_translator}
	ln -sf ${XBPS_SRCDISTDIR}/${pkgver%_*}/naclsdk_linux_x86.tgz \
		native_client/toolchain/.tars/naclsdk_linux_x86.tgz
	ln -sf ${XBPS_SRCDISTDIR}/${pkgver%_*}/naclsdk_pnacl_linux_x86.tgz \
		native_client/toolchain/.tars/naclsdk_pnacl_linux_x86.tgz
	ln -sf ${XBPS_SRCDISTDIR}/${pkgver%_*}/naclsdk_pnacl_translator.tgz \
		native_client/toolchain/.tars/naclsdk_pnacl_translator.tgz
	ln -sf ${XBPS_SRCDISTDIR}/${pkgver%_*}/naclsdk_pnacl_translator.tgz.sha1hash \
		native_client/toolchain/pnacl_translator/SOURCE_SHA1

	# Build with clang as a temporary solution to startup crash with GCC 4.9
	mkdir -p third_party/llvm-build/Release+Asserts/bin
	ln -s /usr/bin/clang third_party/llvm-build/Release+Asserts/bin/
	ln -s /usr/bin/clang++ third_party/llvm-build/Release+Asserts/bin/
	ln -s /usr/bin/llvm-symbolizer third_party/llvm-build/Release+Asserts/bin/
	# clang 3.4 doesn't support this option
	sed -i '/-Wno-absolute-value/d' build/common.gypi
}

do_configure() {
	local conf=""

	unset CC CXX
	export -n CFLAGS CXXFLAGS

	# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
	# Note: These are for Void Linux use ONLY.
	conf+="
		-Dgoogle_api_key=AIzaSyCIFdBA7eQP43R6kXRwTq7j6Mvj1ITze90
		-Dgoogle_default_client_id=858256686058.apps.googleusercontent.com
		-Dgoogle_default_client_secret=sMVx271L_MAz23TW2ek3AASn"

	# Disable glibc Native Client toolchain.
	conf+=" -Ddisable_glibc=1"
	conf+=" -Dlinux_use_tcmalloc=0"

	# Use system-provided libraries.
	# TODO: use_system_hunspell (upstream changes needed).
	# TODO: use_system_libsrtp.
	# TODO: use_system_libusb (http://crbug.com/266149).
	# TODO: use_system_ssl (http://crbug.com/58087).
	# TODO: use_system_sqlite (http://crbug.com/22208).
	#
	# XXX xtraeme: broken currently
	# -Duse_system_v8=1
	# -Duse_system_icu=1
	# -Duse_system_protobuf=1
	# -Duse_system_opus=1
	# -Duse_system_zlib=1
	conf+="
		-Dclang=1
		-Dclang_use_chrome_plugins=0
		-Dpython_ver=2.7
		-Duse_system_bzip2=1
		-Duse_system_flac=1
		-Duse_system_harfbuzz=1
		-Duse_system_jsoncpp=1
		-Duse_system_libevent=1
		-Duse_system_libjpeg=1
		-Duse_system_libpng=1
		-Duse_system_libxml=1
		-Duse_system_libxslt=1
		-Duse_system_libwebp=1
		-Duse_system_minizip=1
		-Duse_system_nspr=1
		-Duse_system_re2=1
		-Duse_system_snappy=1
		-Duse_system_speex=1
		-Duse_system_xdg_utils=1
		-Duse_system_yasm=1
		-Duse_cups=1
		-Dlinux_link_cups=1
		-Duse_pulseaudio=1
		-Dlinux_link_pulseaudio=1
		-Duse_mojo=0
		-Duse_gconf=0"

	# TODO: re-enable on vp9 libvpx release (http://crbug.com/174287).
	# conf+=" -Dmedia_use_libvpx=0"

	# Use explicit library dependencies instead of dlopen.
	conf+="
		-Dlinux_link_gsettings=1
		-Dlinux_link_libpci=1
		-Dlinux_link_libspeechd=1
		-Dlibspeechd_h_prefix=speech-dispatcher/"

	# TODO: use the file at run time instead of effectively compiling it in.
	conf+=" -Dusb_ids_path=/usr/share/hwdata/usb.ids"

	# Never use bundled gold binary. Disable gold linker flags for now.
	conf+=" -Dlinux_use_gold_binary=0 -Dlinux_use_gold_flags=0"

	# Always support proprietary codecs.
	conf+=" -Dproprietary_codecs=1"

	# Enable H.264 support in bundled ffmpeg.
	conf+=" -Dffmpeg_branding=Chrome"

	# Make sure that -Werror doesn't get added to CFLAGS by the build system.
	# Depending on GCC version the warnings are different and we don't want
	# the build to fail because of that.
	conf+=" -Dwerror="

	# Save space by removing DLOG and DCHECK messages (about 6% reduction).
	conf+=" -Dlogging_like_official_build=1"

	if [ "$CROSS_BUILD" ]; then
		case "${XBPS_TARGET_MACHINE}" in
			arm*) arch="arm";;
		esac
		conf+=" -Dtarget_arch=${arch}"
	fi

	build/linux/unbundle/replace_gyp_files.py ${conf}
	build/gyp_chromium --depth=. ${conf} -Drelease_extra_cflags="${CFLAGS/-fstack-protector-strong/}"
}

do_build() {
	unset CC CXX
	export -n CFLAGS CXXFLAGS
	ninja -C out/Release ${makejobs} chrome chrome_sandbox chromedriver
}

do_install() {
	vinstall out/Release/chrome 755 usr/lib/${pkgname} ${pkgname}
	vinstall out/Release/chromedriver 755 usr/lib/${pkgname} chromedriver
	vinstall out/Release/chrome_sandbox 4755 usr/lib/${pkgname} chrome-sandbox

	cp out/Release/{*.pak,libffmpegsumo.so,nacl_helper{,_bootstrap}} \
		out/Release/{libppGoogleNaClPluginChrome.so,nacl_irt_*.nexe} \
		${DESTDIR}/usr/lib/chromium

	cp -a out/Release/locales out/Release/icudtl.dat ${DESTDIR}/usr/lib/chromium

	vinstall out/Release/chrome.1 644 usr/share/man/man1 chromium.1
	vinstall ${FILESDIR}/chromium.desktop 644 usr/share/applications

	for size in 22 24 48 64 128 256; do
		install -Dm644 "chrome/app/theme/chromium/product_logo_${size}.png" \
		${DESTDIR}/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
	done
	for size in 16 32; do
		install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_${size}.png" \
		${DESTDIR}/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
	done

	vinstall ${FILESDIR}/chromium.sh 755 usr/bin chromium
	vinstall LICENSE 644 usr/share/licenses/${pkgname}
	ln -s /usr/lib/chromium/chromedriver ${DESTDIR}/usr/bin/chromedriver
}
