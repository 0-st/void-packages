# Template file for 'chroot-glibc'
pkgname=chroot-glibc
_majorver=2.16
version=${_majorver}.0
wrksrc="glibc-${version}"
revision=3
short_desc="The GNU C library -- for xbps-src use"
maintainer="Juan RP <xtraeme@gmail.com>"
homepage="http://www.gnu.org/software/libc"
license="GPL-2, LGPL-2.1, BSD"
distfiles="http://ftp.gnu.org/gnu/glibc/glibc-${version}.tar.xz"
checksum=1edc36aa2a6cb7127971fce8e02eecffe9c7956297ad3ef10dd4c09f486d5924
long_desc="
 The GNU C Library is the standard system C library for all GNU systems,
 and is an important part of what makes up a GNU system.  It provides the
 system API for all programs written in C and C-compatible languages such
 as C++ and Objective C; the runtime facilities of other programming
 languages use the C library to access the underlying operating system."

noverifyrdeps=yes
bootstrap=yes
nostrip_files="
ld-${_majorver}.so
libc-${_majorver}.so
libpthread-${_majorver}.solibthread_db-1.0.so
"
provides="glibc-${version} glibc-devel-${version}"
conflicts="glibc>=0 glibc-devel>=0"

if [ -n "$IN_CHROOT" ]; then
	makedepends="bison perl"
fi

do_configure() {
	mkdir build && cd build
	echo "slibdir=/usr/lib" > configparms
	echo "bindir=/usr/bin" >> configparms
	echo "sbindir=/usr/sbin" >> configparms

	# Build with -mno-tls-direct-seg-refs to avoid performance problems
	# with Xen on x86 32bit.
	if [ "${XBPS_MACHINE}" = "i686" ]; then
		export CFLAGS="$CFLAGS -mno-tls-direct-seg-refs"
	fi

	SHELL=/bin/bash ../configure \
		${CONFIGURE_SHARED_ARGS} --with-tls \
		--enable-add-ons=nptl,libidn --enable-obsolete-rpc \
		--enable-multi-arch --with-__thread \
		--enable-bind-now --enable-kernel=2.6.27 \
		--enable-stack-guard-randomization --disable-profile \
		--without-cvs --without-gd --libexecdir=/usr/lib \
		--libdir=/usr/lib --with-headers=${XBPS_MASTERDIR}/usr/include
}

do_build() {
	cd build && make ${makejobs}
}

do_install() {
	# Create DESTDIR/etc/ld.so.conf
	mkdir -p ${DESTDIR}/etc
	echo "include /etc/ld.so.conf.d/*.conf" > ${DESTDIR}/etc/ld.so.conf

	cd ${wrksrc}/build
	make SHELL=/bin/bash install_root=${DESTDIR} install

	# ldd is a bash script, so make it run as such.
	. $XBPS_HELPERSDIR/replace-interpreter.sh
	replace_interpreter bash ${DESTDIR}/usr/bin/ldd

	# On x86_64, add dynamic linker's 32bit version to ldd.
	if [ "$XBPS_MACHINE" = "x86_64" ]; then
		rtldlist="/lib/ld-linux.so.2 /lib/ld-linux-x86-64.so.2"
		sed -i "s|^RTLDLIST.*$|RTLDLIST=\"$rtldlist\"|" \
			${DESTDIR}/usr/bin/ldd
	fi
	vmkdir etc/ld.so.conf.d
	echo "/usr/local/lib" > ${DESTDIR}/etc/ld.so.conf.d/usr_local.conf
	chmod 644 ${DESTDIR}/etc/ld.so.conf.d/usr_local.conf
	rm -f ${DESTDIR}/etc/ld.so.cache

	# Remove unused stuff.
	rm -rf ${DESTDIR}/usr/share

	# Switch to /usr.
	vmkdir usr/sbin
	vmove "sbin/*" usr/sbin
}
