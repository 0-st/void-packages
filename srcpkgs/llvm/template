# Template file for 'llvm'
pkgname=llvm
version=3.3
wrksrc="llvm-${version}.src"
revision=2
build_style=gnu-configure
configure_args="--disable-expensive-checks --disable-debug-runtime
 --enable-targets=all --enable-bindings=none --enable-optimize
 --enable-shared --enable-libffi --enable-llvmc-dynamic
 --disable-assertions --libdir=/usr/lib/llvm"
short_desc="Low Level Virtual Machine"
maintainer="Juan RP <xtraeme@gmail.com>"
homepage="http://www.llvm.org"
license="BSD"
distfiles="
 http://www.llvm.org/releases/${version}/llvm-${version}.src.tar.gz
 http://www.llvm.org/releases/${version}/cfe-${version}.src.tar.gz
 http://www.llvm.org/releases/${version}/compiler-rt-${version}.src.tar.gz"
checksum="
 68766b1e70d05a25e2f502e997a3cb3937187a3296595cf6e0977d5cd6727578
 b1b55de4ab3a57d3e0331a83e0284610191c77d924e3446498d9113d08dfb996
 0e2f3180d6316e6c43f064fdd406c5c6515e682c5f31c57c28335b68c7525423"

# XXX Investigate ocaml bindings.
hostmakedepends="groff bsdtar perl python"
makedepends="libffi-devel"

post_extract() {
	# Move clang files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/cfe-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/cfe-${version}.src ${wrksrc}/tools/clang
	fi
	# Move compiler-rt files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/compiler-rt-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/compiler-rt-${version}.src \
			${wrksrc}/projects/compiler-rt
	fi
}

pre_configure() {
	# Fix installation directories, ./configure doesn't seem to set them right
	sed -i -e 's:\$(PROJ_prefix)/etc/llvm:/etc/llvm:' \
		-e 's:\$(PROJ_prefix)/lib:$(PROJ_prefix)/lib/llvm:' \
		-e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
		Makefile.config.in
	sed -i '/ActiveLibDir = ActivePrefix/s:lib:lib/llvm:' \
		tools/llvm-config/llvm-config.cpp
	sed -i 's:LLVM_LIBDIR="${prefix}/lib":LLVM_LIBDIR="${prefix}/lib/llvm":' \
		autoconf/configure.ac configure
}

post_install() {
	# Fix permissions of static libs
	chmod -x ${DESTDIR}/usr/lib/llvm/*.a
 
	# Get rid of example Hello transformation
	rm ${DESTDIR}/usr/lib/llvm/*LLVMHello.*

	# Add ld.so.conf.d entry
	vmkdir etc/ld.so.conf.d
	echo /usr/lib/llvm > ${DESTDIR}/etc/ld.so.conf.d/llvm.conf

	# Required for multilib.
	if [ "$XBPS_MACHINE" = "x86_64" ]; then
		for _header in config llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi
}

clang-analyzer_package() {
	noarch=yes
	pycompile_dirs="usr/lib/clang-analyzer"
	depends="clang>=${version} python"
	short_desc="Low-Level Virtual Machine (LLVM) - A source code analysis framework"
	homepage="http://clang-analyzer.llvm.org/"
	pkg_install() {
		install -d ${PKGDESTDIR}/usr/bin
		install -d ${PKGDESTDIR}/usr/lib/clang-analyzer

		for f in build view; do
			cp -r ${wrksrc}/tools/clang/tools/scan-${f} ${PKGDESTDIR}/usr/lib/clang-analyzer
			cd ${PKGDESTDIR}/usr/bin
			ln -s ../lib/${pkgname}/scan-${f}/scan-${f} scan-${f}
		done

		ln -sf /usr/bin/clang ${PKGDESTDIR}/usr/lib/${pkgname}/scan-build
	}
}

clang_package() {
	depends="libstdc++-devel binutils"
	short_desc="Low-Level Virtual Machine (LLVM) -- C language family frontend"
	homepage="http://clang.llvm.org/"
	pkg_install() {
		vmove usr/include/clang
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/lib/clang
		vmove "usr/lib/llvm/libclang*"
		vmove "usr/share/man/man1/*clang*"
	}
}

llvm-docs_package() {
	noarch=yes
	short_desc+="  - documentation files"
	pkg_install() {
		vmove usr/share/doc
	}
}

llvm_package() {
	pkg_install() {
		vmove all
	}
}
