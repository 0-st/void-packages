# Template file for 'llvm'
pkgname=llvm
version=3.6.2
revision=2
wrksrc="llvm-${version}.src"
lib32disabled=yes
configure_args="--disable-expensive-checks --disable-debug-runtime
 --enable-bindings=none --enable-optimized --enable-shared --enable-libffi
 --enable-llvmc-dynamic --disable-assertions --enable-keep-symbols
 --enable-experimental-targets=R600"
short_desc="Low Level Virtual Machine"
maintainer="Juan RP <xtraeme@voidlinux.eu>"
homepage="http://www.llvm.org"
license="BSD"
distfiles="
 http://www.llvm.org/releases/${version}/llvm-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/lld-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/lldb-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/cfe-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/compiler-rt-${version}.src.tar.xz"
checksum="
 f60dc158bfda6822de167e87275848969f0558b3134892ff54fced87e4667b94
 43f553c115563600577764262f1f2fac3740f0c639750f81e125963c90030b33
 940dc96b64919b7dbf32c37e0e1d1fc88cc18e1d4b3acf1e7dfe5a46eb6523a9
 ae9180466a23acb426d12444d866b266ff2289b266064d362462e44f8d4699f3
 0f2ff37d80a64575fecd8cf0d5c50f7ac1f837ddf700d1855412bb7547431d87"

# XXX Investigate ocaml bindings.
hostmakedepends="groff perl python zlib-devel libffi-devel swig"
makedepends="python-devel zlib-devel libffi-devel libedit-devel"

subpackages="clang clang-analyzer libllvm3.6 llvm-docs"
if [ -z "$CROSS_BUILD" ]; then
	# XXX fails to cross compile due to python
	subpackages+=" lldb lldb-devel"
fi
subpackages+=" lld"

post_extract() {
	# patches
	cd ${XBPS_BUILDDIR}/llvm-${version}.src
	for i in ${FILESDIR}/patches/llvm/llvm-*.patch; do
		patch -sNp0 -i ${i}
	done

	cd ${XBPS_BUILDDIR}/compiler-rt-${version}.src
	for i in ${FILESDIR}/patches/compiler-rt/compiler-rt-*.patch; do
		patch -sNp0 -i ${i}
	done
	case "$XBPS_TARGET_MACHINE" in
		*-musl) patch -sNp0 -i "${FILESDIR}/patches/compiler-rt/compiler-rt_musl_001-disable-sanitizers.patch" ;;
	esac

	cd ${XBPS_BUILDDIR}/cfe-${version}.src
	for i in ${FILESDIR}/patches/cfe/cfe-*.patch; do
		patch -sNp0 -i ${i}
	done

	cd ${XBPS_BUILDDIR}/lldb-${version}.src
	for i in ${FILESDIR}/patches/lldb/*.patch; do
		patch -sNp0 -i ${i}
	done

	# Move clang files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/cfe-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/cfe-${version}.src ${wrksrc}/tools/clang
	fi
	# Move lld files into the llvm source
	if [ -d ${XBPS_BUILDDIR}/lld-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/lld-${version}.src ${wrksrc}/tools/lld
	fi
	# Move lldb files into the llvm source.
	if [ -z "$CROSS_BUILD" -a -d ${XBPS_BUILDDIR}/lldb-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/lldb-${version}.src ${wrksrc}/tools/lldb
	fi
	# Move compiler-rt files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/compiler-rt-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/compiler-rt-${version}.src ${wrksrc}/projects/compiler-rt
	fi
}

do_configure() {
	unset CC CXX CPP AR AS RANLIB CFLAGS CXXFLAGS CPPFLAGS LDFLAGS

	# Fix installation directories, ./configure doesn't seem to set them right
	sed -i -e 's:\$(PROJ_prefix)/etc/llvm:/etc/llvm:' \
		-e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
		Makefile.config.in

	mkdir build
	cd build
	../configure ${configure_args}
}

do_build() {
	unset CC CXX CPP AR AS RANLIB CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
	cd build
	make REQUIRES_RTTI=1 ${makejobs}
}

do_install() {
	cd build
	make DESTDIR=${DESTDIR} install

	# Fix permissions of static libs
	chmod -x ${DESTDIR}/usr/lib/*.a

	# Get rid of example Hello transformation
	rm ${DESTDIR}/usr/lib/*LLVMHello.*

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in config llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	ln -s /usr/bin/clang ${DESTDIR}/usr/bin/clang-cpp

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi
}

clang-analyzer_package() {
	noarch=yes
	pycompile_dirs="usr/lib/clang-analyzer"
	depends="clang-${version}_${revision} python"
	short_desc+=" - A source code analysis framework"
	homepage="http://clang-analyzer.llvm.org/"
	pkg_install() {
		vmkdir usr/bin
		vmkdir usr/lib/clang-analyzer

		for f in build view; do
			cp -r ${wrksrc}/tools/clang/tools/scan-${f} ${PKGDESTDIR}/usr/lib/clang-analyzer
			cd ${PKGDESTDIR}/usr/bin
			ln -s ../lib/${pkgname}/scan-${f}/scan-${f} scan-${f}
		done

		ln -sf /usr/bin/clang ${PKGDESTDIR}/usr/lib/${pkgname}/scan-build
	}
}
clang_package() {
	lib32disabled=yes
	depends="libstdc++-devel binutils gcc"
	short_desc+=" - C language family frontend"
	homepage="http://clang.llvm.org/"
	pkg_install() {
		vmove usr/include/clang
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/lib/clang
		vmove "usr/lib/libclang*"
		vmove "usr/share/man/man1/*clang*"
	}
}
lldb_package() {
	lib32disabled=yes
	short_desc+=" - LLDB debugger"
	homepage="http://lldb.llvm.org/"
	pkg_install() {
		vmove "usr/bin/*lldb*"
		vmove "usr/lib/liblldb*so"
		vman tools/lldb/docs/lldb.1
		vmove "/usr/lib/python*"
	}
}
lldb-devel_package() {
	depends="lldb>=${version}_${revision}"
	short_desc+=" - LLDB debugger - development files"
	pkg_install() {
		vmove usr/include/lldb
		vmove "usr/lib/liblldb*.a"
	}
}
lld_package() {
	lib32disabled=yes
	short_desc+=" - Linker"
	homepage="http://lld.llvm.org"
	pkg_install() {
		vmove usr/include/lld
		vmove usr/bin/lld
		vmove "usr/lib/liblld*"
	}
}
llvm-docs_package() {
	noarch=yes
	short_desc+=" - documentation files"
	pkg_install() {
		vmove usr/share/doc
	}
}
libllvm3.6_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove usr/lib/libLLVM-${version%.*}.so
		vmove usr/lib/libLLVM-${version}.so
	}
}
