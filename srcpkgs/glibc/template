# Template file for 'glibc'
pkgname=glibc
version=2.14
revision=4
distfiles="http://ftp.gnu.org/gnu/glibc/glibc-${version}.tar.bz2"
build_style=custom-install
short_desc="The GNU C library"
maintainer="Juan RP <xtraeme@gmail.com>"
homepage="http://www.gnu.org/software/libc"
license="GPL-2, LGPL-2.1, BSD"
checksum=8404b54651d42133d9a2ab17d30d698e53c5f250b2ad8e5f3d9a208ea7c75d6c
long_desc="
 The GNU C Library is the standard system C library for all GNU systems,
 and is an important part of what makes up a GNU system.  It provides the
 system API for all programs written in C and C-compatible languages such
 as C++ and Objective C; the runtime facilities of other programming
 languages use the C library to access the underlying operating system."

# Don't check for deps here
ignore_vdeps_dir="/usr/lib/gconv"
base_chroot=yes
conf_files="/etc/rpc /etc/ld.so.conf /etc/nsswitch.conf"
subpackages="glibc-devel glibc-locales nscd"

Add_dependency run base-files
Add_dependency run libgcc
Add_dependency run glibc-locales
Add_dependency build gcc
Add_dependency build kernel-libc-headers

do_build()
{
	local cflags

	mkdir build && cd build
	echo "slibdir=/lib" > configparms

	# Build with -mno-tls-direct-seg-refs to avoid performance problems
	# with Xen on x86 32bit.
	if [ "${xbps_machine}" = "i686" ]; then
		cflags="-mno-tls-direct-seg-refs -march=${xbps_machine%%-*}"
		cflags="$cflags -mtune=generic"
	fi
	cflags="$XBPS_CFLAGS $cflags"
	echo "CFLAGS=$cflags" >> configparms

	SHELL=/bin/bash ../configure --prefix=/usr --with-tls \
		--enable-add-ons --disable-multi-arch \
		--enable-bind-now --enable-kernel=2.6.27 \
		--enable-stack-guard-randomization --disable-profile \
		--without-cvs --without-gd --libexecdir=/usr/lib \
		--libdir=/usr/lib --with-headers=${XBPS_MASTERDIR}/usr/include

	make ${makejobs}
}

do_install()
{
	# Create DESTDIR/etc/ld.so.conf
	mkdir -p ${DESTDIR}/etc
	echo "include /etc/ld.so.conf.d/*.conf" > ${DESTDIR}/etc/ld.so.conf

	cd ${wrksrc}/build && make SHELL=/bin/bash install_root=${DESTDIR} install

	# ldd is a bash script, so make it run as such.
	. $XBPS_HELPERSDIR/replace-interpreter.sh
	replace_interpreter bash ${DESTDIR}/usr/bin/ldd

	# On x86_64, add dynamic linker's 32bit version to ldd.
	if [ "$xbps_machine" = "x86_64" ]; then
		rtldlist="/lib/ld-linux.so.2 /lib/ld-linux-x86-64.so.2"
		sed -i "s|^RTLDLIST.*$|RTLDLIST=\"$rtldlist\"|" \
			${DESTDIR}/usr/bin/ldd
	fi
	install -m644 ${FILESDIR}/nsswitch.conf ${DESTDIR}/etc
	install -d ${DESTDIR}/etc/ld.so.conf.d
	echo "/usr/local/lib" > ${DESTDIR}/etc/ld.so.conf.d/usr_local.conf
	chmod 644 ${DESTDIR}/etc/ld.so.conf.d/usr_local.conf
	rm -f ${DESTDIR}/etc/ld.so.cache
}
