# Template build file for 'chroot-gcc'
#
_majorver=4.7
_gmp_ver=5.0.5
_mpfr_ver=3.1.2
_mpc_ver=0.8.2

pkgname=chroot-gcc
version=${_majorver}.3
revision=1
wrksrc="gcc-${version}"
homepage="http://gcc.gnu.org"
short_desc="The GNU C Compiler suite -- for xbps-src use"
maintainer="Juan RP <xtraeme@gmail.com>"
license="GPL-3"
distfiles="
 http://ftp.gnu.org/pub/gnu/gcc/gcc-${version}/gcc-${version}.tar.bz2
 http://ftp.gnu.org/pub/gnu/gmp/gmp-${_gmp_ver}.tar.bz2
 http://www.mpfr.org/mpfr-current/mpfr-${_mpfr_ver}.tar.bz2
 http://www.multiprecision.org/mpc/download/mpc-${_mpc_ver}.tar.gz"
checksum="
 2f7c37eb4fc14422ff2358a9ef59c974a75ab41204ef0e49fc34ab1d8981a9c3
 1f588aaccc41bb9aed946f9fe38521c26d8b290d003c5df807f65690f2aadec9
 79c73f60af010a30a5c27a955a1d2d01ba095b72537dab0ecaad57f5a7bb1b6b
 ae79f8d41d8a86456b68607e9ca398d00f8b7342d1d83bcf4428178ac45380c7"

create_wrksrc=yes
bootstrap=yes

if [ -z "$CROSS_BUILD" ]; then
	makedepends="chroot-binutils>=2.22.52.0.4"
fi
if [ -n "$IN_CHROOT" ]; then
	makedepends+=" perl flex"
fi

pre_configure() {
	cd gcc-${version}
	for f in ${FILESDIR}/*; do
		patch -Np0 -i ${f}
	done
	# As specified in the LFS book, disable installing libiberty.
	sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in
	# Do not run fixincludes
	sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
}

_gmp_build() {
	cd ${wrksrc}
	[ ! -d gmp-build ] && mkdir gmp-build
	cd gmp-build
	[ -f .gmp_build_done ] && return

	../gmp-${_gmp_ver}/configure \
		${CONFIGURE_SHARED_ARGS} --prefix=${wrksrc}/buildtmp \
		--disable-shared --enable-static

	make ${makejobs}
	make install

	rm -f ${wrksrc}/buildtmp/lib/*.la

	touch .gmp_build_done
}

_mpfr_build() {
	cd ${wrksrc}
	[ ! -d mpfr-build ] && mkdir mpfr-build
	cd mpfr-build
	[ -f .mpfr_build_done ] && return

	../mpfr-${_mpfr_ver}/configure \
		${CONFIGURE_SHARED_ARGS} --prefix=${wrksrc}/buildtmp \
		--with-gmp=${wrksrc}/buildtmp \
		--disable-shared --enable-static

	make ${makejobs}
	make install

	rm -f ${wrksrc}/buildtmp/lib/*.la

	touch .mpfr_build_done
}

_mpc_build() {
	cd ${wrksrc}
	[ ! -d mpc-build ] && mkdir mpc-build
	cd mpc-build
	[ -f .mpc_build_done ] && return

	../mpc-${_mpc_ver}/configure \
		${CONFIGURE_SHARED_ARGS} --prefix=${wrksrc}/buildtmp \
		--with-gmp=${wrksrc}/buildtmp \
		--with-mpfr=${wrksrc}/buildtmp \
		--disable-shared --enable-static

	make ${makejobs}
	make install

	rm -f ${wrksrc}/buildtmp/lib/*.la

	touch .mpfr_build_done
}

do_configure() {
	local _floatabi _args

	if [ "$XBPS_TARGET_MACHINE" = "armv6l" ]; then
		_floatabi="--with-float=hard"
	fi

	if [ "$CROSS_BUILD" ]; then
		export CC="$XBPS_CROSS_TRIPLET-gcc"
		export GCC="$CC"
		export CC_FOR_TARGET="$CC"
		export GCC_FOR_TARGET="$CC"
		export CXX="$XBPS_CROSS_TRIPLET-g++"
		export CXX_FOR_TARGET="$CXX"
		export CFLAGS="-Os"
		export CXXFLAGS="$CFLAGS"
	fi

	_gmp_build
	_mpfr_build
	_mpc_build

	cd ${wrksrc}
	[ ! -d gcc-build ] && mkdir gcc-build
	cd gcc-build

	CONFIG_SHELL=/bin/bash \
		../gcc-${version}/configure ${CONFIGURE_SHARED_ARGS} \
		--libdir=/usr/lib --libexecdir=/usr/lib \
		--enable-clocale=gnu --enable-shared \
		--enable-threads=posix --enable-__cxa_atexit \
		--disable-gold --disable-lto --enable-linker-build-id \
		--with-gmp=${wrksrc}/buildtmp \
		--with-mpfr=${wrksrc}/buildtmp \
		--with-mpc=${wrksrc}/buildtmp \
		--enable-gnu-unique-object --enable-checking=release \
		--enable-languages=c,c++ --disable-nls --disable-multilib \
		--without-cloog --without-ppl --disable-libstdcxx-pch \
		--disable-libquadmath --disable-libquadmath-support \
		--disable-libgomp --disable-libssp --disable-libitm \
		${_floatabi}
}

do_build() {
	cd gcc-build
	make ${makejobs}
}

do_install() {
	local _triplet=

	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		_triplet="${XBPS_TARGET_MACHINE}-unknown-linux-gnu"
	elif [ "$XBPS_TARGET_MACHINE" = "i686" ]; then
		_triplet="${XBPS_TARGET_MACHINE}-pc-linux-gnu"
	elif [ "$XBPS_TARGET_MACHINE" = "armv6l" ]; then
		_triplet="arm-linux-gnueabihf"
	else
		msg_error "$pkgver: unknown XBPS_MACHINE\n"
	fi

	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		vmkdir usr/lib
		cd ${DESTDIR}/usr && ln -sf lib lib64 && cd ${wrksrc}
	fi

	cd gcc-build
	make DESTDIR=${DESTDIR} install

	# Make version a symlink of major version to make all versions
	# from the same series work automagically.
	mv ${DESTDIR}/usr/lib/gcc/${_triplet}/${version} \
		${DESTDIR}/usr/lib/gcc/${_triplet}/${_majorver}
	cd ${DESTDIR}/usr/lib/gcc/${_triplet} && ln -sf ${_majorver} ${version}

	# Ditto for c++ headers.
	mv ${DESTDIR}/usr/include/c++/${version} \
		${DESTDIR}/usr/include/c++/${_majorver}
	cd ${DESTDIR}/usr/include/c++ && ln -sf ${_majorver} ${version}

	# cc symlink.
	cd ${DESTDIR}/usr/bin && ln -sf gcc cc
	# rpcgen wants /lib/cpp, make a symlink
	cd ${DESTDIR}/usr/lib && ln -sf ../bin/cpp .

	rm -f ${DESTDIR}/usr/lib64

	# Remove unused stuff.
	rm -f ${DESTDIR}/usr/lib/libffi*
	rm -f ${DESTDIR}/usr/lib/libmudflap*
	rm -rf ${DESTDIR}/usr/share

	# Remove all python scripts in libdir.
	rm -f ${DESTDIR}/usr/lib/*.py
}

chroot-gcc_package() {
	provides="libgcc-${version} libstdc++-${version} libstdc++-devel-${version}
		gcc-${version} gcc-c++-${version}"
	conflicts="libgcc>=0 libstdc++>=0 libstdc++-devel>=0 gcc>=0 gcc-c++>=0"
	noverifyrdeps=yes
	pkg_install() {
		vmove usr
	}
}
