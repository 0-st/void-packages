# Template build file for 'perl-Encode-Locale'.
pkgname=perl-Encode-Locale
version=1.03
revision=1
wrksrc="Encode-Locale-$version"
build_style=perl-module
hostmakedepends="perl>=5.18"
makedepends="${hostmakedepends}"
depends="${makedepends}"
noarch="yes"
short_desc="Encode::Locale - Determine the locale encoding"
maintainer="davehome <davehome@redthumb.info.tm>"
homepage="http://search.cpan.org/dist/Encode-Locale"
license="GPL-2"
distfiles="${CPAN_SITE}/Encode/Encode-Locale-$version.tar.gz"
checksum=f76337e0933225914111fcc3319ff4db359b1abfd1aa56dff2df5378db0e2d55
long_desc="
 In many applications it's wise to let Perl use Unicode for the strings it
 processes. Most of the interfaces Perl has to the outside world is still byte
 based. Programs therefore needs to decode byte strings that enter the program
 from the outside and encode them again on the way out.
 
 The POSIX locale system is used to specify both the language conventions
 requested by the user and the preferred character set to consume and output.
 The Encode::Locale module looks up the charset and encoding (called a
 CODESET in the locale jargon) and arrange for the Encode module to know this
 encoding under the name locale. It means bytes obtained from the environment
 can be converted to Unicode strings by calling Encode::encode(locale =>
 $bytes) and converted back again with Encode::decode(locale => $string)."
