In musl libc headers there is no u_int64_t defined,
thus use the <stdint.h> type uint64_t instead.

--- tools/profiler/local_debug_info_symbolizer.cc	2015-07-14 00:10:06.000000000 +0200
+++ tools/profiler/local_debug_info_symbolizer.cc	2015-08-21 13:35:17.690298070 +0200
@@ -222,7 +222,7 @@
     debug_info_module = it->second;
   }
 
-  u_int64_t address = frame->instruction - frame->module->base_address();
+  uint64_t address = frame->instruction - frame->module->base_address();
   Module::Function* function =
       debug_info_module->FindFunctionByAddress(address);
   if (function) {
@@ -282,7 +282,7 @@
   if (it == symbols_.end()) return NULL;
 
   Module* module = it->second;
-  u_int64_t address = frame->instruction - frame->module->base_address();
+  uint64_t address = frame->instruction - frame->module->base_address();
   Module::StackFrameEntry* entry =
       module->FindStackFrameEntryByAddress(address);
   if (!entry)
--- tools/profiler/UnwinderThread2.cpp	2015-07-14 00:10:06.000000000 +0200
+++ tools/profiler/UnwinderThread2.cpp	2015-08-21 15:38:53.699962995 +0200
@@ -456,7 +456,7 @@
 //////////////////////////////////////////////////////////
 
 // This is the interface to LUL.
-typedef  struct { u_int64_t pc; u_int64_t sp; }  PCandSP;
+typedef  struct { uint64_t pc; uint64_t sp; }  PCandSP;
 
 // Forward declaration.  Implementation is below.
 static
@@ -1318,7 +1318,7 @@
       else {
         // We have at least one N and one P entry available.
         // Scan forwards to find the SP of the current P entry
-        u_int64_t sp_cur_P = 0;
+        uint64_t sp_cur_P = 0;
         unsigned int m = next_P + 1;
         while (1) {
           /* This assertion should hold because in a well formed
@@ -1329,7 +1329,7 @@
           if (ent.is_ent_hint('Q'))
             break;
           if (ent.is_ent('S')) {
-            sp_cur_P = reinterpret_cast<u_int64_t>(ent.get_tagPtr());
+            sp_cur_P = reinterpret_cast<uint64_t>(ent.get_tagPtr());
             break;
           }
           m++;
@@ -1338,7 +1338,7 @@
           if (0) LOG("  P  <=  last_was_P && sp_cur_P == 0");
           use_P = true;
         } else {
-          u_int64_t sp_cur_N = pairs[next_N].sp;
+          uint64_t sp_cur_N = pairs[next_N].sp;
           use_P = (sp_cur_P > sp_cur_N);
           if (0) LOGF("  %s  <=  sps P %p N %p",
                       use_P ? "P" : "N", (void*)(intptr_t)sp_cur_P, 
