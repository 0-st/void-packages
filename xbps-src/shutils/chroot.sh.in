#-
# Copyright (c) 2008-2010 Juan Romero Pardines.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-

#
# Script to install packages into a sandbox in masterdir.
# Actually this needs the xbps-base-chroot package installed.
#

# Umount stuff if SIGINT or SIGQUIT was caught
trap "${sudo_cmd} @@XBPS_INSTALL_LIBEXECDIR@@/xbps-src-chroot-helper umount && exit $?" INT QUIT

[ -n "$base_chroot" ] && return 0

if [ "${chroot_cmd}" = "chroot" ]; then
	if [ "$(id -u)" -ne 0 ]; then
		echo "Root permissions are required for the chroot, try again."
		exit 1
	fi
fi

. $XBPS_SHUTILSDIR/builddep_funcs.sh
check_installed_pkg xbps-base-chroot-0.11
if [ $? -ne 0 ]; then
	echo "The '$pkgname' package requires to be installed in a chroot."
	echo "Please install 'xbps-base-chroot>=0.11' and try again."
	exit 1
fi

msg_normal "Entering into the chroot on $XBPS_MASTERDIR."

if [ ! -d $XBPS_MASTERDIR/usr/local/etc ]; then
	mkdir -p $XBPS_MASTERDIR/usr/local/etc
fi

XBPSSRC_CF=$XBPS_MASTERDIR/usr/local/etc/xbps-src.conf

echo "XBPS_DISTRIBUTIONDIR=/xbps" > $XBPSSRC_CF
echo "XBPS_MASTERDIR=/" >> $XBPSSRC_CF
echo "XBPS_CFLAGS=\"$XBPS_CFLAGS\"" >> $XBPSSRC_CF
echo "XBPS_CXXFLAGS=\"\$XBPS_CFLAGS\"" >> $XBPSSRC_CF
echo "XBPS_FETCH_CMD='xbps-uhelper.static fetch'" >> $XBPSSRC_CF
if [ -n "$XBPS_MAKEJOBS" ]; then
	echo "XBPS_MAKEJOBS=$XBPS_MAKEJOBS" >> $XBPSSRC_CF
fi
if [ -n "$XBPS_PREFER_BINPKG_DEPS" ]; then
	echo "XBPS_PREFER_BINPKG_DEPS=$XBPS_PREFER_BINPKG_DEPS" >> $XBPSSRC_CF
fi
echo "XBPS_COMPRESS_CMD=$XBPS_COMPRESS_CMD" >> $XBPSSRC_CF
if [ -n "$XBPS_COMPRESS_LEVEL" ]; then
	echo "XBPS_COMPRESS_LEVEL=$XBPS_COMPRESS_LEVEL" >> $XBPSSRC_CF
fi

prepare_chroot()
{
	local f=

	# Create some required files.
	cp -f /etc/mtab $XBPS_MASTERDIR/etc
	cp -f /etc/resolv.conf $XBPS_MASTERDIR/etc
	[ -f /etc/localtime ] && cp -f /etc/localtime $XBPS_MASTERDIR/etc

	for f in run/utmp log/btmp log/lastlog log/wtmp; do
		touch -f $XBPS_MASTERDIR/var/$f
	done
	for f in run/utmp log/lastlog; do
		chmod 644 $XBPS_MASTERDIR/var/$f
	done

	cat > $XBPS_MASTERDIR/etc/passwd <<_EOF
root:x:0:0:root:/root:/bin/bash
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
$(whoami):x:$(id -u):$(id -g):$(whoami) user:/dev/null:/bin/bash
_EOF

	# Default group list as specified by LFS.
	cat > $XBPS_MASTERDIR/etc/group <<_EOF
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
wheel:x:4:
tty:x:5:
tape:x:6:
daemon:x:7:
floppy:x:8:
disk:x:9:
lp:x:10:
dialout:x:11:
audio:x:12:
video:x:13:
utmp:x:14:
usb:x:15:
cdrom:x:16:
optical:x:17:
mail:x:18:
storage:x:19:
scanner:x:20:
nogroup:x:99:
users:x:1000:
$(whoami):x:$(id -g):
_EOF

	# Default file as in Ubuntu.
	cat > $XBPS_MASTERDIR/etc/hosts <<_EOF
127.0.0.1	xbps	localhost.localdomain	localhost
127.0.1.1	xbps

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
_EOF

	create_binsh_symlink

	touch $XBPS_MASTERDIR/.xbps_perms_done
}

create_binsh_symlink()
{
	if [ ! -h $XBPS_MASTERDIR/bin/sh ]; then
		cd $XBPS_MASTERDIR/bin && ln -sf bash sh
	fi
}

prepare_binpkg_repos()
{
	if [ ! -f "$XBPS_MASTERDIR/.xbps_added_local_repo" ]; then
		msg_normal "Registering local binpkg repo..."
		${chroot_cmd} $XBPS_MASTERDIR \
			${XBPS_REPO_CMD} add /xbps_packagesdir
		[ $? -eq 0 ] && touch -f $XBPS_MASTERDIR/.xbps_added_local_repo
	fi
}

create_busybox_links()
{
	local busyboxdir=$XBPS_MASTERDIR/usr/lib/busybox-initramfs
	local lbindir=$XBPS_MASTERDIR/usr/local/bin

	[ -f $XBPS_MASTERDIR/.busybox_done ] && return 0

	[ ! -d ${lbindir} ] && mkdir -p ${lbindir}

	# Create other symlinks in /usr/local/bin
	for f in $(find ${busyboxdir} -type l); do
		cd ${lbindir} || return 1
		[ "$(basename $f)" = "sh" ] && continue
		ln -s ../../lib/busybox-initramfs/bin/busybox $(basename $f)
	done

	touch -f $XBPS_MASTERDIR/.busybox_done
}

install_xbps_utils()
{
	local needed _cmd
	local xbps_prefix=$XBPS_MASTERDIR/usr/local

	for f in bin repo uhelper; do
		if [ ! -x $xbps_prefix/sbin/xbps-${f}.static ]; then
			needed=yes
		fi
	done

	if [ -n "$needed" ]; then
		echo "=> Installing the required XBPS utils."
		for f in bin repo uhelper; do
			_cmd=$(which xbps-${f}.static 2>/dev/null)
			if [ -z "${_cmd}" ]; then
				echo "Unexistent xbps-uhelper.static file!"
				exit 1
			fi
			cp -f ${_cmd} $xbps_prefix/sbin
		done
	fi
}

xbps_chroot_handler()
{
	local action="$1"
	local pkg="$2"
	local only_destdir="$3"
	local norm_builddir="$4"
	local path="/tools/bin:/usr/local/sbin:/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin"
	[ -z "$action" -o -z "$pkg" ] && return 1

	[ "$action" != "configure" -a "$action" != "build" -a \
	  "$action" != "install" -a "$action" != "chroot" ] && return 1

	if [ ! -f $XBPS_MASTERDIR/.xbps_perms_done ]; then
		echo -n "==> Preparing chroot on $XBPS_MASTERDIR... "
		prepare_chroot
		echo "done."
	fi

	create_binsh_symlink
	create_busybox_links
	install_xbps_utils

	MASTERDIR="${XBPS_MASTERDIR}" ${sudo_cmd} \
		@@XBPS_INSTALL_LIBEXECDIR@@/xbps-src-chroot-helper mount
	[ $? -ne 0 ] && return $?

	if [ -n "$XBPS_PREFER_BINPKG_DEPS" ]; then
		prepare_binpkg_repos
	fi

	# Reinstall xbps-src in the chroot
	if [ ! -f $XBPS_MASTERDIR/usr/local/sbin/xbps-src ]; then
		env in_chroot=yes LANG=C PATH=$path \
		    ${chroot_cmd} $XBPS_MASTERDIR sh -c \
		    "cd /xbps/xbps-src && make IN_CHROOT=1 install clean"
	fi

	if [ "$action" = "chroot" ]; then
		env in_chroot=yes IN_CHROOT=1 LANG=C PATH=$path \
			${chroot_cmd} $XBPS_MASTERDIR /bin/sh
	else
		local lenv
		[ -n "$only_destdir" ] && \
			lenv="install_destdir_target=yes"
		[ -n "$norm_builddir" ] && \
			action="-C $action"
		env in_chroot=yes LANG=C PATH=$path \
			${lenv} ${chroot_cmd} $XBPS_MASTERDIR sh -c \
			"cd /xbps/srcpkgs/$pkg && xbps-src $action"
	fi
	msg_normal "Exiting from the chroot on $XBPS_MASTERDIR."
	MASTERDIR="${XBPS_MASTERDIR}" ${sudo_cmd} \
		@@XBPS_INSTALL_LIBEXECDIR@@/xbps-src-chroot-helper umount

	return $?
}
